// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorupload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensorupload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nervousproto {

namespace {

const ::google::protobuf::Descriptor* SensorUpload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorUpload_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorUpload_SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorUpload_SensorData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensorupload_2eproto() {
  protobuf_AddDesc_sensorupload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensorupload.proto");
  GOOGLE_CHECK(file != NULL);
  SensorUpload_descriptor_ = file->message_type(0);
  static const int SensorUpload_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, huuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, luuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, upload_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, sensor_values_),
  };
  SensorUpload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorUpload_descriptor_,
      SensorUpload::default_instance_,
      SensorUpload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorUpload));
  SensorUpload_SensorData_descriptor_ = SensorUpload_descriptor_->nested_type(0);
  static const int SensorUpload_SensorData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, record_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, value_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, value_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, value_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, value_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, value_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, value_string_),
  };
  SensorUpload_SensorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorUpload_SensorData_descriptor_,
      SensorUpload_SensorData::default_instance_,
      SensorUpload_SensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorUpload_SensorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorUpload_SensorData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensorupload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorUpload_descriptor_, &SensorUpload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorUpload_SensorData_descriptor_, &SensorUpload_SensorData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensorupload_2eproto() {
  delete SensorUpload::default_instance_;
  delete SensorUpload_reflection_;
  delete SensorUpload_SensorData::default_instance_;
  delete SensorUpload_SensorData_reflection_;
}

void protobuf_AddDesc_sensorupload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022sensorupload.proto\022\014nervousproto\"\311\002\n\014S"
    "ensorUpload\022\r\n\005huuid\030\001 \002(\004\022\r\n\005luuid\030\002 \002("
    "\004\022\023\n\013upload_time\030\003 \002(\004\022\021\n\tsensor_id\030\004 \002("
    "\004\022<\n\rsensor_values\030\005 \003(\0132%.nervousproto."
    "SensorUpload.SensorData\032\264\001\n\nSensorData\022\023"
    "\n\013record_time\030\001 \002(\004\022\026\n\nvalue_bool\030\002 \003(\010B"
    "\002\020\001\022\027\n\013value_int32\030\003 \003(\005B\002\020\001\022\027\n\013value_in"
    "t64\030\004 \003(\003B\002\020\001\022\027\n\013value_float\030\005 \003(\002B\002\020\001\022\030"
    "\n\014value_double\030\006 \003(\001B\002\020\001\022\024\n\014value_string"
    "\030\007 \003(\tB7\n!ch.ethz.soms.nervous.nervouspr"
    "otoB\022SensorUploadProtos", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensorupload.proto", &protobuf_RegisterTypes);
  SensorUpload::default_instance_ = new SensorUpload();
  SensorUpload_SensorData::default_instance_ = new SensorUpload_SensorData();
  SensorUpload::default_instance_->InitAsDefaultInstance();
  SensorUpload_SensorData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensorupload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensorupload_2eproto {
  StaticDescriptorInitializer_sensorupload_2eproto() {
    protobuf_AddDesc_sensorupload_2eproto();
  }
} static_descriptor_initializer_sensorupload_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SensorUpload_SensorData::kRecordTimeFieldNumber;
const int SensorUpload_SensorData::kValueBoolFieldNumber;
const int SensorUpload_SensorData::kValueInt32FieldNumber;
const int SensorUpload_SensorData::kValueInt64FieldNumber;
const int SensorUpload_SensorData::kValueFloatFieldNumber;
const int SensorUpload_SensorData::kValueDoubleFieldNumber;
const int SensorUpload_SensorData::kValueStringFieldNumber;
#endif  // !_MSC_VER

SensorUpload_SensorData::SensorUpload_SensorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorUpload_SensorData::InitAsDefaultInstance() {
}

SensorUpload_SensorData::SensorUpload_SensorData(const SensorUpload_SensorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorUpload_SensorData::SharedCtor() {
  _cached_size_ = 0;
  record_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorUpload_SensorData::~SensorUpload_SensorData() {
  SharedDtor();
}

void SensorUpload_SensorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorUpload_SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorUpload_SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorUpload_SensorData_descriptor_;
}

const SensorUpload_SensorData& SensorUpload_SensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensorupload_2eproto();
  return *default_instance_;
}

SensorUpload_SensorData* SensorUpload_SensorData::default_instance_ = NULL;

SensorUpload_SensorData* SensorUpload_SensorData::New() const {
  return new SensorUpload_SensorData;
}

void SensorUpload_SensorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    record_time_ = GOOGLE_ULONGLONG(0);
  }
  value_bool_.Clear();
  value_int32_.Clear();
  value_int64_.Clear();
  value_float_.Clear();
  value_double_.Clear();
  value_string_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorUpload_SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_time_)));
          set_has_record_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value_bool;
        break;
      }

      // repeated bool value_bool = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value_bool())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18, input, this->mutable_value_bool())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_int32;
        break;
      }

      // repeated int32 value_int32 = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value_int32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_value_int32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value_int64;
        break;
      }

      // repeated int64 value_int64 = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value_int64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34, input, this->mutable_value_int64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value_float;
        break;
      }

      // repeated float value_float = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value_float())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_value_float())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_double;
        break;
      }

      // repeated double value_double = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value_double())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_value_double())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value_string;
        break;
      }

      // repeated string value_string = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_string(this->value_string_size() - 1).data(),
            this->value_string(this->value_string_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value_string;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorUpload_SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 record_time = 1;
  if (has_record_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_time(), output);
  }

  // repeated bool value_bool = 2 [packed = true];
  if (this->value_bool_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_bool_cached_byte_size_);
  }
  for (int i = 0; i < this->value_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->value_bool(i), output);
  }

  // repeated int32 value_int32 = 3 [packed = true];
  if (this->value_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_int32_cached_byte_size_);
  }
  for (int i = 0; i < this->value_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->value_int32(i), output);
  }

  // repeated int64 value_int64 = 4 [packed = true];
  if (this->value_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->value_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->value_int64(i), output);
  }

  // repeated float value_float = 5 [packed = true];
  if (this->value_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_float_cached_byte_size_);
  }
  for (int i = 0; i < this->value_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value_float(i), output);
  }

  // repeated double value_double = 6 [packed = true];
  if (this->value_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_double_cached_byte_size_);
  }
  for (int i = 0; i < this->value_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value_double(i), output);
  }

  // repeated string value_string = 7;
  for (int i = 0; i < this->value_string_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value_string(i).data(), this->value_string(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->value_string(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorUpload_SensorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 record_time = 1;
  if (has_record_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_time(), target);
  }

  // repeated bool value_bool = 2 [packed = true];
  if (this->value_bool_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_bool_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_bool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value_bool(i), target);
  }

  // repeated int32 value_int32 = 3 [packed = true];
  if (this->value_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_int32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->value_int32(i), target);
  }

  // repeated int64 value_int64 = 4 [packed = true];
  if (this->value_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_int64_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_int64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value_int64(i), target);
  }

  // repeated float value_float = 5 [packed = true];
  if (this->value_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_float_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_float(i), target);
  }

  // repeated double value_double = 6 [packed = true];
  if (this->value_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_double_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value_double(i), target);
  }

  // repeated string value_string = 7;
  for (int i = 0; i < this->value_string_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_string(i).data(), this->value_string(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->value_string(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorUpload_SensorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 record_time = 1;
    if (has_record_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_time());
    }

  }
  // repeated bool value_bool = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->value_bool_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_bool_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 value_int32 = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value_int32(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_int32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 value_int64 = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value_int64(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_int64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float value_float = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_float_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_float_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double value_double = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->value_double_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_double_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string value_string = 7;
  total_size += 1 * this->value_string_size();
  for (int i = 0; i < this->value_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value_string(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorUpload_SensorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorUpload_SensorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorUpload_SensorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorUpload_SensorData::MergeFrom(const SensorUpload_SensorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_bool_.MergeFrom(from.value_bool_);
  value_int32_.MergeFrom(from.value_int32_);
  value_int64_.MergeFrom(from.value_int64_);
  value_float_.MergeFrom(from.value_float_);
  value_double_.MergeFrom(from.value_double_);
  value_string_.MergeFrom(from.value_string_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_time()) {
      set_record_time(from.record_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorUpload_SensorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorUpload_SensorData::CopyFrom(const SensorUpload_SensorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUpload_SensorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SensorUpload_SensorData::Swap(SensorUpload_SensorData* other) {
  if (other != this) {
    std::swap(record_time_, other->record_time_);
    value_bool_.Swap(&other->value_bool_);
    value_int32_.Swap(&other->value_int32_);
    value_int64_.Swap(&other->value_int64_);
    value_float_.Swap(&other->value_float_);
    value_double_.Swap(&other->value_double_);
    value_string_.Swap(&other->value_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorUpload_SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorUpload_SensorData_descriptor_;
  metadata.reflection = SensorUpload_SensorData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SensorUpload::kHuuidFieldNumber;
const int SensorUpload::kLuuidFieldNumber;
const int SensorUpload::kUploadTimeFieldNumber;
const int SensorUpload::kSensorIdFieldNumber;
const int SensorUpload::kSensorValuesFieldNumber;
#endif  // !_MSC_VER

SensorUpload::SensorUpload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorUpload::InitAsDefaultInstance() {
}

SensorUpload::SensorUpload(const SensorUpload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorUpload::SharedCtor() {
  _cached_size_ = 0;
  huuid_ = GOOGLE_ULONGLONG(0);
  luuid_ = GOOGLE_ULONGLONG(0);
  upload_time_ = GOOGLE_ULONGLONG(0);
  sensor_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorUpload::~SensorUpload() {
  SharedDtor();
}

void SensorUpload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorUpload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorUpload_descriptor_;
}

const SensorUpload& SensorUpload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensorupload_2eproto();
  return *default_instance_;
}

SensorUpload* SensorUpload::default_instance_ = NULL;

SensorUpload* SensorUpload::New() const {
  return new SensorUpload;
}

void SensorUpload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    huuid_ = GOOGLE_ULONGLONG(0);
    luuid_ = GOOGLE_ULONGLONG(0);
    upload_time_ = GOOGLE_ULONGLONG(0);
    sensor_id_ = GOOGLE_ULONGLONG(0);
  }
  sensor_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 huuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &huuid_)));
          set_has_huuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_luuid;
        break;
      }

      // required uint64 luuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &luuid_)));
          set_has_luuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upload_time;
        break;
      }

      // required uint64 upload_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_time_)));
          set_has_upload_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sensor_id;
        break;
      }

      // required uint64 sensor_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sensor_values;
        break;
      }

      // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sensor_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 huuid = 1;
  if (has_huuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->huuid(), output);
  }

  // required uint64 luuid = 2;
  if (has_luuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->luuid(), output);
  }

  // required uint64 upload_time = 3;
  if (has_upload_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->upload_time(), output);
  }

  // required uint64 sensor_id = 4;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sensor_id(), output);
  }

  // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
  for (int i = 0; i < this->sensor_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensor_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorUpload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 huuid = 1;
  if (has_huuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->huuid(), target);
  }

  // required uint64 luuid = 2;
  if (has_luuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->luuid(), target);
  }

  // required uint64 upload_time = 3;
  if (has_upload_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->upload_time(), target);
  }

  // required uint64 sensor_id = 4;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sensor_id(), target);
  }

  // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
  for (int i = 0; i < this->sensor_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sensor_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorUpload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 huuid = 1;
    if (has_huuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->huuid());
    }

    // required uint64 luuid = 2;
    if (has_luuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->luuid());
    }

    // required uint64 upload_time = 3;
    if (has_upload_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_time());
    }

    // required uint64 sensor_id = 4;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sensor_id());
    }

  }
  // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
  total_size += 1 * this->sensor_values_size();
  for (int i = 0; i < this->sensor_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorUpload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorUpload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorUpload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorUpload::MergeFrom(const SensorUpload& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensor_values_.MergeFrom(from.sensor_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huuid()) {
      set_huuid(from.huuid());
    }
    if (from.has_luuid()) {
      set_luuid(from.luuid());
    }
    if (from.has_upload_time()) {
      set_upload_time(from.upload_time());
    }
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorUpload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorUpload::CopyFrom(const SensorUpload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUpload::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < sensor_values_size(); i++) {
    if (!this->sensor_values(i).IsInitialized()) return false;
  }
  return true;
}

void SensorUpload::Swap(SensorUpload* other) {
  if (other != this) {
    std::swap(huuid_, other->huuid_);
    std::swap(luuid_, other->luuid_);
    std::swap(upload_time_, other->upload_time_);
    std::swap(sensor_id_, other->sensor_id_);
    sensor_values_.Swap(&other->sensor_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorUpload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorUpload_descriptor_;
  metadata.reflection = SensorUpload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nervousproto

// @@protoc_insertion_point(global_scope)
